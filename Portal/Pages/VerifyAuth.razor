@page "/verifyauth"
@inject IProductEndpoint productEndpoint

<h3>VerifyAuth</h3>

@if (isAuthenticated)
{
    <h4>@UserName is authenticated</h4>
    <ul>
        <li>Access to Admin Role: @isAdminUser</li>
        <li>Access to Cashier Role: @isCashier</li>
        <li>Access to Manager Role: @isManager</li>
    </ul>
}
else
{
    <h4>The user is not authenticated</h4>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private bool isAuthenticated = false;
    private string UserName;
    private bool isAdminUser = false;
    private bool isCashier = false;
    private bool isManager = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            isAuthenticated = true;

            UserName = authState.User.FindFirst(ClaimTypes.Name).Value;

            isAdminUser = authState.User.IsInRole("Admin");
            isCashier = authState.User.IsInRole("Cashier");
            isManager = authState.User.IsInRole("Manager");
        }

        try
        {
            var products = await productEndpoint.GetAll();
            foreach (var product in products)
            {
                Console.WriteLine(product.Description);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
