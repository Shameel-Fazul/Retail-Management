@page "/products" 
@inject IProductEndpoint ProductEndpoint
@inject IConfiguration config
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@attribute [Authorize(Roles = "Cashier")]

<h3>Products</h3>

<div class="container-fluid">
    @if (products is not null)
    {
        <div class="row">
            @foreach (ProductModel product in products)
            {
                <div class="col-xl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a href="">
                                    <img src="https://dummyimage.com/1200x900/000/fff" class="img-fluid rounded" alt="Placeholder image" />
                                </a>
                                <p class="my-2 text-justify">
                                    @product.Description
                                </p>
                                <p class="mb-1">
                                    <strong>Quantity:</strong>@product.QuantityInStock
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <p class="h5 mb-3">@product.ProductName - $@product.RetailPrice</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            <p>No products have been loaded.</p>
        </div>
    }
</div>

@code {
    private List<ProductModel> products;
    private const string productListName = "productList";
    private const string productCacheDate = "productCacheDate";


    protected override async Task OnInitializedAsync()
    {
        products = await localStorage.GetItemAsync<List<ProductModel>>(productListName);
        DateTime? cacheDate = await localStorage.GetItemAsync<DateTime?>(productCacheDate);
        double totalMinutes = 0;

        if (cacheDate is not null)
        {
            totalMinutes =  DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
        }

        if (products is null || cacheDate is null || totalMinutes > 10)
        {
            try
            {
                products = await ProductEndpoint.GetAll();
                await localStorage.SetItemAsync(productListName, products);
                await localStorage.SetItemAsync(productCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
